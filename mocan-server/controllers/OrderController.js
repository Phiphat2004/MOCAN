const Order = require("../models/Order");
const Product = require("../models/Product");

// üü¢ T·∫°o Order m·ªõi
const nodemailer = require('nodemailer');

exports.createOrder = async (req, res) => {
  try {
    const { guest, order_detail, payment_method } = req.body;

    if (!order_detail || !Array.isArray(order_detail) || order_detail.length === 0) {
      return res.status(400).json({ message: 'Order must include order_detail items' });
    }

    const guestArr = Array.isArray(guest) ? guest : (guest ? [guest] : []);
    if (guestArr.length === 0) return res.status(400).json({ message: 'Guest information required' });
    const guestInfo = guestArr[0];
    if (!guestInfo.name || !guestInfo.phone || !guestInfo.address)
      return res.status(400).json({ message: 'Guest name, phone and address are required' });

    // validate products and stock
    let totalAmount = 0;
    const savedDetails = [];
    const decremented = [];
    for (const it of order_detail) {
      const pid = it.product_id;
      const qty = Number(it.quantity || 0);
      if (!pid || qty <= 0) {
        for (const d of decremented) {
          await Product.findByIdAndUpdate(d.pid, { $inc: { stock_quantity: d.qty } });
        }
        return res.status(400).json({ message: 'Invalid product or quantity' });
      }

      const updatedProduct = await Product.findOneAndUpdate(
        { _id: pid, stock_quantity: { $gte: qty } },
        { $inc: { stock_quantity: -qty } },
        { new: true }
      );

      if (!updatedProduct) {
        for (const d of decremented) {
          await Product.findByIdAndUpdate(d.pid, { $inc: { stock_quantity: d.qty } });
        }
        return res.status(400).json({ message: `S·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß cho s·∫£n ph·∫©m ${pid}` });
      }

      const unit_price = Number(it.unit_price ?? updatedProduct.price ?? 0);
      const total_price = unit_price * qty;
      totalAmount += total_price;
      savedDetails.push({
        product_id: String(pid),
        product_name: updatedProduct.name,
        image: updatedProduct.images && updatedProduct.images.length > 0 ? updatedProduct.images[0] : '',
        quantity: qty,
        color: it.color || '',
        size: it.size || '',
        unit_price,
        total_price,
      });
      decremented.push({ pid, qty });
    }

    const note = req.body.note ?? guestInfo.note ?? undefined;

    const orderDoc = new Order({
      order_date: new Date(),
      total_amount: totalAmount,
      note,
      payment_method: payment_method || 'COD',
      guest: [guestInfo],
      order_detail: savedDetails,
    });

    const savedOrder = await orderDoc.save();

    // ----------------------------
    // ‚úâÔ∏è G·ª¨I EMAIL X√ÅC NH·∫¨N
    // ----------------------------
    if (guestInfo.email) {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      // t·∫°o b·∫£ng HTML danh s√°ch s·∫£n ph·∫©m, th√™m m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc
      const tableRows = savedDetails.map(item => `
        <tr style="border-bottom:1px solid #ddd;text-align:center;">
          <td style="padding:8px;"><img src="${item.image}" width="70" /></td>
          <td style="padding:8px;">${item.product_name}</td>
          <td style="padding:8px;">${item.quantity}</td>
          <td style="padding:8px;">${item.unit_price.toLocaleString()}‚Ç´</td>
          <td style="padding:8px;">${item.total_price.toLocaleString()}‚Ç´</td>
          <td style="padding:8px; text-align:center;">
              ${
        item.color
          ? `<div style="
                display:inline-block;
                width:20px;
                height:20px;
                border-radius:50%;
                background-color:${item.color};
                border:1px solid #ccc;
                vertical-align:middle;
              " title="${item.color}">
            </div>`
          : '-'
      }
          </td>
          <td style="padding:8px;">${item.size ? item.size : '-'}</td>
        </tr>
      `).join('');

      const mailHTML = `
        <div style="font-family:sans-serif;">
          <h2>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i <span style="color:#4CAF50;">ECO SOAP</span>!</h2>
          <p>M√£ ƒë∆°n h√†ng: <strong>${savedOrder._id}</strong></p>
          <h3>Th√¥ng tin ng∆∞·ªùi nh·∫≠n:</h3>
          <p><strong>T√™n:</strong> ${guestInfo.name}</p>
          <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${guestInfo.phone}</p>
          <p><strong>ƒê·ªãa ch·ªâ:</strong> ${guestInfo.address}</p>
          ${note ? `<p><strong>Ghi ch√∫:</strong> ${note}</p>` : ''}
          <h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>
          <table style="width:100%;border-collapse:collapse;margin-top:10px;">
            <thead>
              <tr style="background:#f4f4f4;">
                <th>H√¨nh ·∫£nh</th>
                <th>S·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>ƒê∆°n gi√°</th>
                <th>Th√†nh ti·ªÅn</th>
                <th>M√†u s·∫Øc</th>
                <th>K√≠ch th∆∞·ªõc</th>
              </tr>
            </thead>
            <tbody>${tableRows}</tbody>
          </table>
          <h3 style="text-align:right;margin-top:10px;">T·ªïng c·ªông: ${totalAmount.toLocaleString()}‚Ç´</h3>
          <p style="margin-top:20px;">Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n ƒë∆°n h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</p>
          <p>Tr√¢n tr·ªçng,<br/>ƒê·ªôi ng≈© <strong>ECO SOAP</strong></p>
          <p>S·ªë ƒëi·ªán tho·∫°i: <strong>032 951 7751</strong></p>
        </div>
      `;

      await transporter.sendMail({
        from: `"ECO SOAP" <${process.env.EMAIL_USER}>`,
        to: guestInfo.email,
        subject: `X√°c nh·∫≠n ƒë∆°n h√†ng #${savedOrder._id}`,
        html: mailHTML,
      });
      console.log('savedDetails', savedDetails);
      console.log(`üì© ƒê√£ g·ª≠i email x√°c nh·∫≠n t·ªõi ${guestInfo.email}`);
    }

    // ----------------------------
    // ‚ú® PH·∫¢N H·ªíI CHO FRONTEND
    // ----------------------------
    res.status(201).json({
      message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!',
      order_id: savedOrder._id,
      total_amount: totalAmount,
    });

  } catch (error) {
    console.error('createOrder error', error);
    res.status(400).json({ message: error.message });
  }
};


// üîµ L·∫•y t·∫•t c·∫£ Order
exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().populate("order_detail.product_id");
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üü£ L·∫•y Order theo ID
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id).populate(
      "order_detail.product_id"
    );
    if (!order) return res.status(404).json({ message: "Order not found" });
    res.json(order);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üü† C·∫≠p nh·∫≠t Order
exports.updateOrder = async (req, res) => {
  try {
    const order = await Order.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    }).populate("order_detail.product_id");

    if (!order) return res.status(404).json({ message: "Order not found" });
    res.json(order);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// üî¥ X√≥a Order
exports.deleteOrder = async (req, res) => {
  try {
    const order = await Order.findByIdAndDelete(req.params.id);
    if (!order) return res.status(404).json({ message: "Order not found" });
    res.json({ message: "Order deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: "Order not found" });

    // N·∫øu chuy·ªÉn sang 'h·ªßy' v√† tr·∫°ng th√°i c≈© kh√¥ng ph·∫£i 'h·ªßy', ho√†n l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    if (status === "h·ªßy" && order.status !== "h·ªßy") {
      for (const item of order.order_detail) {
        const pid = item.product_id;
        const qty = Number(item.quantity || 0);
        if (pid && qty > 0) {
          await Product.findByIdAndUpdate(pid, { $inc: { stock_quantity: qty } });
        }
      }
    }

    order.status = status;
    await order.save();
    res.json(order);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};
